{
  "uid" : "b7e8bc7610569d6d",
  "name" : "test_02_phone_error",
  "fullName" : "TestCases.test_01_login.TestLogin#test_02_phone_error",
  "historyId" : "354836d1e26a1d804fe77c5a90e294e4",
  "time" : {
    "start" : 1580706668768,
    "stop" : 1580706690907,
    "duration" : 22139
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
  "statusTrace" : "self = <test_01_login.TestLogin object at 0x00000000048C8A20>\nlogin_setUp = (<selenium.webdriver.chrome.webdriver.WebDriver (session=\"3e26a850d7dd55f9eb2ef1621cc7dd41\")>, <PageObjct.login_page.LoginPage object at 0x0000000004AB02E8>)\n\n    def test_02_phone_error(self, login_setUp):\n        login_setUp[1].login(error_phone_data_01[\"phone\"], error_phone_data_01[\"pwd\"])\n>       assert error_phone_data_01[\"excepted\"] == login_setUp[1].get_error_phone_text()\n\nTestCases\\test_01_login.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPageObjct\\login_page.py:30: in get_error_phone_text\n    return self.get_text(lp_loc.error_phone, \"登录页面_账号错误提示语\")\nCommon\\basepage.py:128: in get_text\n    self.wait_ele_visiball(loc, img_doc, timeout, poll_frequency)\nCommon\\basepage.py:53: in wait_ele_visiball\n    WebDriverWait(self.driver, timeout, poll_frequency).until(EC.visibility_of_element_located(loc))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"3e26a850d7dd55f9eb2ef1621cc7dd41\")>\nmethod = <selenium.webdriver.support.expected_conditions.visibility_of_element_located object at 0x0000000004AB0B70>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nE:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "login_setUp",
    "time" : {
      "start" : 1580706668767,
      "stop" : 1580706668767,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "int_driver",
    "time" : {
      "start" : 1580706660409,
      "stop" : 1580706668767,
      "duration" : 8358
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
    "statusTrace" : "self = <test_01_login.TestLogin object at 0x00000000048C8A20>\nlogin_setUp = (<selenium.webdriver.chrome.webdriver.WebDriver (session=\"3e26a850d7dd55f9eb2ef1621cc7dd41\")>, <PageObjct.login_page.LoginPage object at 0x0000000004AB02E8>)\n\n    def test_02_phone_error(self, login_setUp):\n        login_setUp[1].login(error_phone_data_01[\"phone\"], error_phone_data_01[\"pwd\"])\n>       assert error_phone_data_01[\"excepted\"] == login_setUp[1].get_error_phone_text()\n\nTestCases\\test_01_login.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPageObjct\\login_page.py:30: in get_error_phone_text\n    return self.get_text(lp_loc.error_phone, \"登录页面_账号错误提示语\")\nCommon\\basepage.py:128: in get_text\n    self.wait_ele_visiball(loc, img_doc, timeout, poll_frequency)\nCommon\\basepage.py:53: in wait_ele_visiball\n    WebDriverWait(self.driver, timeout, poll_frequency).until(EC.visibility_of_element_located(loc))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"3e26a850d7dd55f9eb2ef1621cc7dd41\")>\nmethod = <selenium.webdriver.support.expected_conditions.visibility_of_element_located object at 0x0000000004AB0B70>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nE:\\python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "6d476f929c1c9804",
      "name" : "log",
      "source" : "6d476f929c1c9804.txt",
      "type" : "text/plain",
      "size" : 1194
    }, {
      "uid" : "922b9e6e031f68d2",
      "name" : "stderr",
      "source" : "922b9e6e031f68d2.txt",
      "type" : "text/plain",
      "size" : 1586
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "login_setUp::0",
    "time" : {
      "start" : 1580706691143,
      "stop" : 1580706691143,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "int_driver::0",
    "time" : {
      "start" : 1580706691146,
      "stop" : 1580706693869,
      "duration" : 2723
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "TestCases"
  }, {
    "name" : "suite",
    "value" : "test_01_login"
  }, {
    "name" : "subSuite",
    "value" : "TestLogin"
  }, {
    "name" : "host",
    "value" : "XZ-20140602GVEE"
  }, {
    "name" : "thread",
    "value" : "6788-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "TestCases.test_01_login"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "b7e8bc7610569d6d.json",
  "parameterValues" : [ ]
}